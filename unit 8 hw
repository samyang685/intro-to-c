// unit8.hw
// Pablo Mendoza

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct employee {
    int id;
    char name[50];
    float salary;
    int numberOfDependents;
    struct employee *next;
    struct employee *below;
};

//----------------------- FUNCTION PROTOTYPES ---------------------------
int getId(char *name);
void printEmployee(struct employee e);
void printAllEmployees(struct employee *list);
struct employee *addEmployee(struct employee *list, struct employee e);
int searchEmployee(struct employee *list, char *name);
float highestNetSalary(struct employee *list);

//----------------------- FUNCTION DEFINITIONS ---------------------------

//0. Calculate ID based on ASCII values
int getId(char *name) {
    int id = 0;
    for (int i = 0; name[i] != '\0'; i++) {
        if (name[i] == '\n') {
            continue; // this makes it continue even with a new line character
        }
        if (name[i] >= 'a' && name[i] <= 'z') {
            id += name[i] - 32; // this makes it uppercase
        } else {
            id += name[i];
        }
    }
    return id;
}

//1. Print employee details
void printEmployee(struct employee e) {
    float netSalary = e.salary * 0.91 + (e.numberOfDependents * 0.01 * e.salary);
    printf("[%d,%s,%.2f]\n", e.id, e.name, netSalary);
}

//2. Print all employees in the company
void printAllEmployees(struct employee *list) {
    struct employee *current = list;
    while (current != NULL) {
        struct employee *below = current;
        while (below != NULL) {
            printEmployee(*below);
            below = below->below;
        }
        current = current->next;
    }
}

//3. Add a new employee to the list
struct employee *addEmployee(struct employee *list, struct employee e) {
    // this gets rid of the new line character to find employees easier
    e.name[strcspn(e.name, "\n")] = '\0';

    struct employee *newEmployee = (struct employee *)malloc(sizeof(struct employee));
    *newEmployee = e;
    newEmployee->next = NULL;
    newEmployee->below = NULL;

    if (list == NULL) {
        return newEmployee;
    }

    struct employee *current = list, *prev = NULL;
    while (current != NULL) {
        if (current->id == e.id) {
            struct employee *below = current;
            while (below->below != NULL) {
                below = below->below;
            }
            below->below = newEmployee;
            return list;
        }
        prev = current;
        current = current->next;
    }

  
    prev->next = newEmployee;
    return list;
}

int searchEmployee(struct employee *list, char *name) {

    name[strcspn(name, "\n")] = '\0';

    struct employee *current = list;
    while (current != NULL) {
        struct employee *below = current;
        while (below != NULL) {
            if (strcmp(below->name, name) == 0) {
                return 1; // if they are found
            }
            below = below->below;
        }
        current = current->next;
    }
    return 0; // if they are not found
}


//5. Find the highest net salary
float highestNetSalary(struct employee *list) {
    float maxNetSalary = 0.0;
    struct employee *current = list;
    while (current != NULL) {
        struct employee *below = current;
        while (below != NULL) {
            float netSalary = below->salary * 0.91 + (below->numberOfDependents * 0.01 * below->salary);
            if (netSalary > maxNetSalary) {
                maxNetSalary = netSalary;
            }
            below = below->below;
        }
        current = current->next;
    }
    return maxNetSalary;
}

//----------------------- MAIN FUNCTION ---------------------------
int main() {
    struct employee *company = NULL, tempEmployee;
    int tempInt = 0;
    char tempName[50] = "Allal Kamch";
    char dummy;

    printf("Enter 1 to add a new employee, 0 to stop: ");
    scanf("%d", &tempInt);

    while (tempInt == 1) {
        printf("Enter Full Name: ");
        scanf("%c", &dummy);
        fgets(tempEmployee.name, 50, stdin);

        tempEmployee.id = getId(tempEmployee.name);

        printf("Enter salary-numberOfDependents: ");
        scanf("%f-%d", &tempEmployee.salary, &tempEmployee.numberOfDependents);

        company = addEmployee(company, tempEmployee);

        printf("Enter 1 to add a new employee, 0 to stop: ");
        scanf("%d", &tempInt);
    }

    printAllEmployees(company);
    printf("Highest Net Salary = %.2f\n", highestNetSalary(company));

    tempInt = searchEmployee(company, tempName);
    if (tempInt == 1) {
        printf("%s is found!\n", tempName);
    } else {
        printf("%s is NOT found!\n", tempName);
    }

    return 0;
}

